// Saved State Machine that creates states based on a dynamic layout.
// Nodes are generated by parsing an XML file using RapidXML library
#include "abstract_fsm.h"
#include <rapidxml.hpp>
#include <rapidxml_utils.hpp>
#include <rapidxml_print.hpp>
#include <algorithm>
#include <unordered_map>
using namespace rapidxml;

namespace AbstractFSM
{
	namespace DataDriven
	{
		class SavedMachineState : public State
		{
#pragma region Members
		public:
			enum StateFlags
			{
				None = 0,
				Enter = 1,
				Exit = 2,
			};
			// Helper to convert enum flag names to char* for printing to XML
			char* flag_names_[3] =
			{
				"None",
				"Enter",
				"Exit"
			};
			// Mapping enum values to their names as strings
			std::unordered_map <std::string, StateFlags> flag_name_map_;
		private:
			// Flags associated with the state
			StateFlags m_flags_;
			// Name of the machine state
			std::string m_name_;
			// Description of the state
			std::string m_description_;
			// List of possible neighbors
			std::vector<std::string> m_neighbors_;
			// Unique key associated with the machine state
			std::string m_key_;
		public:
			// Fetch the list of neighbors
			std::vector<std::string>& Neighbors();
#pragma	endregion

#pragma region Constructors
			// State created based on specified values
			SavedMachineState::SavedMachineState(std::string key, StateFlags flags, std::string name, std::string description, std::string neighbors);
			// State populated based on XML data
			SavedMachineState(xml_node<> *);
#pragma	endregion

#pragma region Helper Functions
			// Initialze enum <-> string mapping
			void InitMap();
			// Check for initial state
			bool IsStartState() const { return (m_flags_ & StateFlags::Enter) == StateFlags::Enter; }
			// Check for exit state
			bool IsExitState() const { return (m_flags_ & StateFlags::Exit) == StateFlags::Exit; }
			// Fetch the key value
			std::string Key() const { return m_key_; }
			// Utility method to convert string to lower
			std::string ToLower(std::string);
			// Utility method to check if string matches current states key or name
			bool IsMyName(std::string);
#pragma endregion

#pragma region State Overrides
			std::string GetName();
			void Run();
#pragma endregion

#pragma region XML Members
		    // Read the XML values from the root node
			void ReadXml(xml_node<> *);
			// Creating the DOM tree from state values
			void WriteXml(xml_document<> &doc);
#pragma endregion
		};
	}
}